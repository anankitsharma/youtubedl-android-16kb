name: Build aligned native libs (16KB)

on:
  workflow_dispatch:

jobs:
  build_aria2:
    name: Build aria2 (arm64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build aria2 arm64
        run: |
          echo "Building aria2 for arm64..."
          # put your actual aria2 build commands here
      - name: Stage aria2 ZIP
        run: |
          mkdir -p out/aria2
          echo "dummy aria2 build output" > out/aria2/libaria2.so
          zip -r aria2-arm64.zip out/aria2
      - uses: actions/upload-artifact@v4
        with:
          name: aria2-arm64
          path: aria2-arm64.zip
      - uses: actions/upload-artifact@v4
        with:
          name: aria2-debs
          path: "*.deb"
          if-no-files-found: ignore

  build_python:
    name: Build Python (arm64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Python arm64
        run: |
          echo "Building Python for arm64..."
          # put your actual python build commands here
      - name: Stage Python ZIP
        run: |
          mkdir -p out/python
          echo "dummy python build output" > out/python/libpython.so
          zip -r python-arm64.zip out/python
      - uses: actions/upload-artifact@v4
        with:
          name: python-arm64
          path: python-arm64.zip
      - uses: actions/upload-artifact@v4
        with:
          name: python-debs
          path: "*.deb"
          if-no-files-found: ignore

  build_ffmpeg:
    name: Build Ffmpeg (arm64, direct NDK)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Ffmpeg arm64
        run: |
          echo "Building ffmpeg for arm64..."
          # put your actual ffmpeg build commands here
      - name: Stage ffmpeg ZIP
        run: |
          mkdir -p out/ffmpeg
          echo "dummy ffmpeg build output" > out/ffmpeg/libffmpeg.so
          zip -r ffmpeg-arm64.zip out/ffmpeg
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-arm64
          path: ffmpeg-arm64.zip
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-debs
          path: "*.deb"
          if-no-files-found: ignore

  collect-native-libs:
    name: Collect native .so files (arm64)
    runs-on: ubuntu-latest
    needs:
      - build_aria2
      - build_python
      - build_ffmpeg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create download dir
        run: mkdir -p artifacts_download

      - name: Download artifacts from earlier build jobs
        uses: actions/download-artifact@v4
        with:
          names: |
            aria2-arm64
            aria2-debs
            python-arm64
            python-debs
            ffmpeg-arm64
            ffmpeg-debs
          path: artifacts_download

      - name: Extract .deb and collect .so into out/jniLibs/arm64-v8a
        shell: bash
        run: |
          set -euo pipefail
          OUT_DIR="$GITHUB_WORKSPACE/out/jniLibs/arm64-v8a"
          rm -rf "$OUT_DIR"
          mkdir -p "$OUT_DIR"

          TMP_EXTRACT_DIR=$(mktemp -d)
          echo "tmp_extract_dir=$TMP_EXTRACT_DIR"

          # Extract .deb files (if any)
          find artifacts_download -type f -name "*.deb" -print0 | while IFS= read -r -d '' deb; do
            echo "Extracting $deb ..."
            (cd "$TMP_EXTRACT_DIR" && ar x "$GITHUB_WORKSPACE/$deb" || true)
            for tarf in "$TMP_EXTRACT_DIR"/data.tar*; do
              if [ -f "$tarf" ]; then
                mkdir -p "$TMP_EXTRACT_DIR/extracted"
                tar -xf "$tarf" -C "$TMP_EXTRACT_DIR/extracted" || true
              fi
            done
          done

          # Search for .so files
          prefixes=(
            "artifacts_download"
            "$TMP_EXTRACT_DIR/extracted"
            "$GITHUB_WORKSPACE"
          )

          found=0
          for prefix in "${prefixes[@]}"; do
            if [ -d "$prefix" ]; then
              echo "Searching in: $prefix"
              find "$prefix" -type f \( -name "*.so" -o -name "*.so.*" \) -print0 \
                | while IFS= read -r -d '' sofile; do
                    bn=$(basename "$sofile")
                    echo "Copying $sofile -> $OUT_DIR/$bn"
                    cp --preserve=mode,timestamps "$sofile" "$OUT_DIR/$bn" || true
                    found=1
                  done
            fi
          done

          if [ "$found" -eq 0 ]; then
            echo "WARNING: no .so files found!"
            echo "Contents of artifacts_download:"
            find artifacts_download -maxdepth 3 -type f -print || true
            exit 0
          fi

          echo "Collected libs:"
          ls -l "$OUT_DIR" || true

      - name: Upload native-libs artifact (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: native-libs-arm64
          path: out/jniLibs
          if-no-files-found: error
          retention-days: 14
