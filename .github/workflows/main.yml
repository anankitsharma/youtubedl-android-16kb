name: Build aligned native libs (16KB)

on:
  workflow_dispatch:

concurrency:
  group: 16kb-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-ffmpeg:
    name: Build FFmpeg (arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      TERMUX_ARCH: aarch64
      TERMUX_PREFIX: /data/youtubedl-android/usr
      TERMUX_ANDROID_HOME: /data/youtubedl-android/home
      MAKEFLAGS: "-j$(nproc)"
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip dpkg-dev binutils llvm ccache

      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            .ccache
            termux-packages/.termux-build
            termux-packages/debs
            termux-packages/.cache
          key: ffmpeg-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
          restore-keys: |
            ffmpeg-${{ runner.os }}-

      - name: Clone Termux packages (shallow)
        run: |
          if [ ! -d termux-packages ]; then
            git clone --depth 1 https://github.com/termux/termux-packages.git
          fi

      - name: Build FFmpeg
        working-directory: termux-packages
        run: |
          cat > build-ffmpeg.sh << 'EOS'
          #!/usr/bin/env bash
          set -euxo pipefail
          export TERMUX_ARCH=${TERMUX_ARCH}
          export TERMUX_PREFIX=${TERMUX_PREFIX}
          export TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME}
          export CCACHE_DIR=${CCACHE_DIR}
          export CC="ccache clang"
          export CXX="ccache clang++"
          export MAKEFLAGS=${MAKEFLAGS}
          export LDFLAGS="${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          ./scripts/run-docker.sh ./clean.sh
          ./scripts/run-docker.sh env \
            TERMUX_ARCH=${TERMUX_ARCH} \
            TERMUX_PREFIX=${TERMUX_PREFIX} \
            TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME} \
            MAKEFLAGS=${MAKEFLAGS} \
            LDFLAGS="${LDFLAGS}" \
            CCACHE_DIR=${CCACHE_DIR} \
            CC="ccache clang" \
            CXX="ccache clang++" \
            ./build-package.sh ffmpeg
          EOS
          chmod +x build-ffmpeg.sh
          ./build-ffmpeg.sh

      - name: Stage FFmpeg outputs
        run: |
          mkdir -p out/jniLibs/arm64-v8a
          if [ -d termux-packages/debs ]; then
            find termux-packages/debs -type f -name "*.deb" -print -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/ffmpeg \; || true
          fi
          cd $GITHUB_WORKSPACE/out/ffmpeg || exit 0
          if [ -d data/youtubedl-android/usr/lib ]; then
            (cd data/youtubedl-android && zip --symlinks -r $GITHUB_WORKSPACE/out/libffmpeg.zip usr/lib)
            cp $GITHUB_WORKSPACE/out/libffmpeg.zip $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libffmpeg.zip.so
          fi
          ffprobe_path=$(find data -type f -name ffprobe 2>/dev/null | head -n1 || true)
          [ -n "$ffprobe_path" ] && cp "$ffprobe_path" $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libffprobe.so || true
          if ls data/youtubedl-android/usr/lib/libavcodec*.so >/dev/null 2>&1; then
            cp data/youtubedl-android/usr/lib/libavcodec*.so $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libffmpeg.so || true
          fi

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: ignore

  build-aria2:
    name: Build aria2 (arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      TERMUX_ARCH: aarch64
      TERMUX_PREFIX: /data/youtubedl-android/usr
      TERMUX_ANDROID_HOME: /data/youtubedl-android/home
      MAKEFLAGS: "-j$(nproc)"
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip dpkg-dev binutils llvm

      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            termux-packages/.termux-build
            termux-packages/debs
            termux-packages/.cache
          key: aria2-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
          restore-keys: |
            aria2-${{ runner.os }}-

      - name: Clone Termux packages (shallow)
        run: |
          if [ ! -d termux-packages ]; then
            git clone --depth 1 https://github.com/termux/termux-packages.git
          fi

      - name: Build aria2
        working-directory: termux-packages
        run: |
          cat > build-aria2.sh << 'EOS'
          #!/usr/bin/env bash
          set -euxo pipefail
          export TERMUX_ARCH=${TERMUX_ARCH}
          export TERMUX_PREFIX=${TERMUX_PREFIX}
          export TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME}
          export MAKEFLAGS=${MAKEFLAGS}
          export LDFLAGS="${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          ./scripts/run-docker.sh env TERMUX_ARCH=${TERMUX_ARCH} LDFLAGS="${LDFLAGS}" ./build-package.sh aria2
          EOS
          chmod +x build-aria2.sh
          ./build-aria2.sh

      - name: Stage aria2 outputs
        run: |
          find termux-packages/debs -type f -name "*.deb" -print -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/aria2 \; || true
          cd $GITHUB_WORKSPACE/out/aria2 || exit 0
          mkdir -p $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a
          aria2c_path=$(find data -type f -name aria2c 2>/dev/null | head -n1 || true)
          [ -n "$aria2c_path" ] && cp "$aria2c_path" $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libaria2c.so || true
          if [ -d data/youtubedl-android/usr/lib ]; then
            (cd data/youtubedl-android && zip --symlinks -r $GITHUB_WORKSPACE/out/libaria2c.zip usr/lib)
            cp $GITHUB_WORKSPACE/out/libaria2c.zip $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libaria2c.zip.so
          fi

      - name: Upload aria2 artifact
        uses: actions/upload-artifact@v4
        with:
          name: aria2-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: ignore

  build-python:
    name: Build Python (arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      TERMUX_ARCH: aarch64
      TERMUX_PREFIX: /data/youtubedl-android/usr
      TERMUX_ANDROID_HOME: /data/youtubedl-android/home
      MAKEFLAGS: "-j$(nproc)"
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip dpkg-dev binutils llvm

      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            termux-packages/.termux-build
            termux-packages/debs
            termux-packages/.cache
          key: python-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Clone Termux packages (shallow)
        run: |
          if [ ! -d termux-packages ]; then
            git clone --depth 1 https://github.com/termux/termux-packages.git
          fi

      - name: Build Python
        working-directory: termux-packages
        run: |
          cat > build-python.sh << 'EOS'
          #!/usr/bin/env bash
          set -euxo pipefail
          export TERMUX_ARCH=${TERMUX_ARCH}
          export TERMUX_PREFIX=${TERMUX_PREFIX}
          export TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME}
          export MAKEFLAGS=${MAKEFLAGS}
          export LDFLAGS="${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          ./scripts/run-docker.sh env TERMUX_ARCH=${TERMUX_ARCH} LDFLAGS="${LDFLAGS}" ./build-package.sh python
          EOS
          chmod +x build-python.sh
          ./build-python.sh

      - name: Stage Python outputs
        run: |
          find termux-packages/debs -type f -name "*.deb" -print -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/python \; || true
          cd $GITHUB_WORKSPACE/out/python || exit 0
          mkdir -p $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a
          lp=$(find data/youtubedl-android/usr/lib -maxdepth 1 -type f -name "libpython*.so" | head -n1 || true)
          [ -n "$lp" ] && cp "$lp" $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libpython.so || true
          if [ -d data/youtubedl-android/usr/lib ]; then
            (cd data/youtubedl-android && zip --symlinks -r $GITHUB_WORKSPACE/out/libpython.zip usr/lib)
            cp $GITHUB_WORKSPACE/out/libpython.zip $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libpython.zip.so
          fi

      - name: Upload Python artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: ignore

  verify-and-bundle:
    name: Verify alignment and bundle
    runs-on: ubuntu-latest
    needs: [build-ffmpeg, build-aria2, build-python]
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Merge outputs
        run: |
          mkdir -p out/jniLibs/arm64-v8a
          find _artifacts -type f -name "*.so" -exec cp {} out/jniLibs/arm64-v8a/ \; || true

      - name: Verify 16KB alignment (PT_LOAD only)
        run: |
          set -euxo pipefail
          shopt -s nullglob
          files=(out/jniLibs/arm64-v8a/*.so)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No .so files found to verify" && exit 1
          fi
          fail=0
          for f in "${files[@]}"; do
            echo "Checking $f"
            if ! llvm-readobj --program-headers "$f" | awk '/Type: PT_LOAD/{flag=1} flag && /Alignment:/{print $2; flag=0}' | grep -q 16384; then
              echo "Alignment check failed for $f"; fail=1
              llvm-readobj --program-headers "$f" | grep -E '(Type: PT_LOAD|Alignment:)' || true
            fi
          done
          exit $fail

      - name: Upload bundled artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aligned-jniLibs-arm64-v8a
          path: out/jniLibs/arm64-v8a
