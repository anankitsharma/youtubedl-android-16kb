name: Build (16KB-compatible) & Verify

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-verify-16kb:
    runs-on: ubuntu-latest

    # configure project-specific values here if needed
    env:
      APP_MODULE: app
      BUILD_VARIANT: Release                    # produce Gradle task :app:assembleRelease
      APK_PATH: app/build/outputs/apk/release/app-release.apk
      # fallback NDK id to try installing via sdkmanager (can be updated if sdkmanager uses different id)
      NDK_PACKAGE: "ndk;28.0.2572133"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      - name: Install prerequisites (unzip, curl, binutils)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip curl binutils

      - name: Install Android command-line tools (sdkmanager)
        run: |
          set -e
          SDK_ROOT="$HOME/android-sdk"
          mkdir -p "$SDK_ROOT/cmdline-tools"
          cd /tmp
          TOOL_ZIP="commandlinetools-linux-9477386_latest.zip"
          curl -fsSL -o "$TOOL_ZIP" "https://dl.google.com/android/repository/${TOOL_ZIP}"
          unzip -q "$TOOL_ZIP" -d "$SDK_ROOT/cmdline-tools"
          # Move into the 'latest' layout used by recent sdkmanager scripts
          mkdir -p "$SDK_ROOT/cmdline-tools/latest"
          # Some cmdline zips put content under 'cmdline-tools', adjust accordingly:
          if [ -d "$SDK_ROOT/cmdline-tools/cmdline-tools" ]; then
            mv "$SDK_ROOT/cmdline-tools/cmdline-tools"/* "$SDK_ROOT/cmdline-tools/latest/"
          else
            mv "$SDK_ROOT/cmdline-tools"/* "$SDK_ROOT/cmdline-tools/latest/" || true
          fi
          export ANDROID_SDK_ROOT="$SDK_ROOT"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          yes | sdkmanager --licenses

      - name: Install SDK platforms, build-tools and NDK (attempt)
        run: |
          set -e
          export ANDROID_SDK_ROOT="$HOME/android-sdk"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"

          # Install platform and build-tools (adjust API / build-tools version if your project needs other)
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"

          # Try to install the NDK package id configured in NDK_PACKAGE env.
          # If it fails, print sdkmanager --list to help debugging and continue (workflow will still attempt to build).
          set +e
          sdkmanager --install "${NDK_PACKAGE}"
          rc=$?
          set -e
          if [ $rc -ne 0 ]; then
            echo "Warning: sdkmanager could not install requested NDK package (${NDK_PACKAGE})."
            echo "Listing available packages for debugging:"
            sdkmanager --list | sed -n '1,200p'
            echo "Continuing — Gradle may still find an NDK via local config or toolchain."
          fi

      - name: Export Android SDK/NDK environment variables
        run: |
          ANDROID_SDK_ROOT="$HOME/android-sdk"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

          # Detect ndk dir
          ndk_dir=$(ls -d "$ANDROID_SDK_ROOT"/ndk/* 2>/dev/null | tail -n1 || true)
          if [ -z "$ndk_dir" ] && [ -d "$ANDROID_SDK_ROOT/ndk-bundle" ]; then
            ndk_dir="$ANDROID_SDK_ROOT/ndk-bundle"
          fi

          if [ -n "$ndk_dir" ] && [ -d "$ndk_dir" ]; then
            echo "Found NDK at: $ndk_dir"
            echo "ANDROID_NDK_HOME=$ndk_dir" >> $GITHUB_ENV
          else
            echo "NDK not found in standard SDK locations. If your build requires a specific NDK, set ANDROID_NDK_HOME in repository secrets or adjust the install step."
          fi

      - name: Show environment debug info
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_HOME=${ANDROID_NDK_HOME:-<not-set>}"
          echo "Listing SDK & NDK folders:"
          ls -la "$HOME/android-sdk" || true
          ls -la "$HOME/android-sdk/ndk" || true
          ./gradlew -v || true

      - name: Patch native build files to add 16KB flags (idempotent)
        # This step attempts to add 16KB-related flags to ndk-build / CMake files if present.
        run: |
          set -e
          echo "Patching Application.mk files to enable flexible page sizes if present..."
          for am in $(git ls-files | grep -E 'Application.mk$' || true); do
            if ! grep -q 'APP_SUPPORT_FLEXIBLE_PAGE_SIZES' "$am"; then
              printf "\n# Enable flexible page sizes for 16KB compatibility\nAPP_SUPPORT_FLEXIBLE_PAGE_SIZES := true\n" >> "$am"
              echo "Patched $am"
            else
              echo "Already patched: $am"
            fi
          done

          echo "Adding max-page-size LDFLAGS into Android.mk files if missing..."
          for mk in $(git ls-files | grep -E 'Android.mk$' || true); do
            if ! grep -q 'max-page-size=16384' "$mk"; then
              cat >> "$mk" <<'EOF'

# Ensure linker requests 16KB page alignment when possible
ifdef LOCAL_LDFLAGS
LOCAL_LDFLAGS += -Wl,-z,max-page-size=16384
else
LOCAL_LDFLAGS := -Wl,-z,max-page-size=16384
endif

EOF
              echo "Patched $mk"
            else
              echo "Android.mk already contains max-page-size flags: $mk"
            fi
          done

          # For CMake - create small include file and append include to CMakeLists.txt if CMake is used
          if git ls-files | grep -q 'CMakeLists.txt'; then
            mkdir -p cmake
            cat > cmake/16kb-toolchain.cmake <<'EOF'
# Request 16KB page size at link time for shared libs
if(NOT DEFINED CMAKE_SHARED_LINKER_FLAGS)
  set(CMAKE_SHARED_LINKER_FLAGS "")
endif()
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,max-page-size=16384")
EOF
            if ! grep -q '16kb-toolchain.cmake' CMakeLists.txt; then
              echo 'include("${CMAKE_SOURCE_DIR}/cmake/16kb-toolchain.cmake")' >> CMakeLists.txt || true
              echo "Added cmake/16kb-toolchain.cmake inclusion into CMakeLists.txt"
            else
              echo "CMakeLists already includes 16kb toolchain"
            fi
          fi

      - name: Build project (Gradle assemble)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -e
          echo "Running Gradle assemble for :$APP_MODULE:assemble$BUILD_VARIANT"
          ./gradlew clean :${APP_MODULE}:assemble${BUILD_VARIANT} --no-daemon --stacktrace

      - name: Show produced APK path and list APK contents (debug)
        run: |
          APK="$APK_PATH"
          echo "Expected APK path: $APK"
          if [ -f "$APK" ]; then
            echo "APK found: $APK"
            unzip -l "$APK" | sed -n '1,200p'
          else
            echo "APK not found at expected path. Searching for APK outputs..."
            find . -type f -name "*.apk" -print
            exit 1
          fi

      - name: Extract .so files from APK and verify ELF LOAD p_align >= 16384
        run: |
          set -e
          APK="$APK_PATH"
          TMPDIR=$(mktemp -d)
          echo "Extracting APK to $TMPDIR"
          unzip -q "$APK" -d "$TMPDIR"
          so_files=$(find "$TMPDIR/lib" -type f -name '*.so' || true)
          if [ -z "$so_files" ]; then
            echo "No .so files found inside APK under lib/. Exiting with failure."
            ls -R "$TMPDIR" || true
            exit 1
          fi

          pass_all=true
          for so in $so_files; do
            echo "----"
            echo "Inspecting: $so"
            file "$so" || true
            ls -lh "$so" || true
            echo "Program headers:"
            readelf -l "$so" | sed -n '1,200p'

            # Extract p_align values from LOAD program headers and find max
            max_align_hex=$(readelf -l "$so" | awk '/LOAD/ { for(i=1;i<=NF;i++) if ($i ~ /^0x/) last=$i } END{print last}')
            if [ -z "$max_align_hex" ]; then
              # Some readelf variants put numeric p_align without 0x; try another extraction
              max_align_dec=$(readelf -l "$so" | awk '/LOAD/ {print $NF}' | awk 'BEGIN{m=0} {v=$1+0; if(v>m) m=v} END{print m}')
            else
              max_align_dec=$((max_align_hex))
            fi

            echo "Detected max p_align for $so : $max_align_dec"

            if [ -z "$max_align_dec" ] || [ "$max_align_dec" -lt 16384 ]; then
              echo "FAIL: $so has p_align=${max_align_dec:-unknown} (<16384). Needs re-linking with 16KB support."
              pass_all=false
            else
              echo "OK: $so has p_align=$max_align_dec (>=16384)"
            fi
          done

          if [ "$pass_all" != "true" ]; then
            echo "One or more .so files failed the 16KB alignment check."
            exit 2
          else
            echo "All .so files passed the 16KB alignment check. ✅"
          fi

      - name: Upload built APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: built-apk
          path: ${{ env.APK_PATH }}
