name: Build aligned native libs (16KB)

on:
  workflow_dispatch:

# Allow multiple runs; we prefer reliability over cancellation
concurrency:
  group: 16kb-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-ffmpeg:
    name: Build FFmpeg (arm64, direct NDK)
    runs-on: ubuntu-latest
    timeout-minutes: 240
    env:
      API: 21
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
      CCACHE_DIR: ${{ github.workspace }}/.ccache
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl tar xz-utils pkg-config build-essential git nasm yasm llvm ccache

      - name: Set up Java (for sdkmanager)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android NDK r27
        run: |
          yes | sdkmanager --licenses >/dev/null || true
          sdkmanager --install "ndk;27.0.12077973" "platform-tools" "platforms;android-34" || true
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> $GITHUB_ENV

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ffmpeg-ccache-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
          restore-keys: |
            ffmpeg-ccache-${{ runner.os }}-

      - name: Download FFmpeg source (shallow)
        run: |
          curl -L -o ffmpeg.tar.xz https://ffmpeg.org/releases/ffmpeg-6.1.1.tar.xz
          mkdir ffmpeg-src && tar -xf ffmpeg.tar.xz -C ffmpeg-src --strip-components=1

      - name: Configure (aarch64, minimal, shared)
        working-directory: ffmpeg-src
        env:
          ANDROID_NDK: ${{ env.ANDROID_NDK }}
        run: |
          export NDK=${ANDROID_NDK:-$ANDROID_NDK_ROOT}
          export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/linux-x86_64
          export TARGET=aarch64-linux-android
          export API=${API}
          # Use direct clang paths (no spaces) to avoid configure parsing the
          # compiler path as a separate option
          export CC="$TOOLCHAIN/bin/${TARGET}${API}-clang"
          export CXX="$TOOLCHAIN/bin/${TARGET}${API}-clang++"
          export AR=$TOOLCHAIN/bin/llvm-ar
          export LD=$TOOLCHAIN/bin/ld.lld
          export STRIP=$TOOLCHAIN/bin/llvm-strip
          export NM=$TOOLCHAIN/bin/llvm-nm
          export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
          export PKG_CONFIG=false
          export CFLAGS="-fPIC -O2"
          export LDFLAGS="${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          ./configure \
            --target-os=android \
            --arch=aarch64 \
            --enable-cross-compile \
            --cc="$CC" \
            --cxx="$CXX" \
            --ar=$AR \
            --nm=$NM \
            --ranlib=$RANLIB \
            --strip=$STRIP \
            --pkg-config=false \
            --prefix=/data/youtubedl-android/usr \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-debug \
            --enable-small \
            --disable-autodetect \
            --enable-ffmpeg \
            --enable-ffprobe \
            --disable-ffplay \
            --disable-postproc \
            --disable-avdevice \
            --disable-filters \
            --disable-network \
            --disable-muxers \
            --disable-encoders \
            --disable-decoders \
            --disable-demuxers \
            --disable-parsers \
            --enable-muxer=mp4,matroska,webm,segment,concat,adts \
            --enable-demuxer=mov,matroska,webm,mp3,mp4,ogg,flv,mpegts \
            --enable-parser=aac,h264,hevc,opus,vorbis,mp3 \
            --enable-decoder=aac,h264,hevc,opus,vorbis,mp3 \
            --enable-protocol=file,pipe,concat

      - name: Build
        working-directory: ffmpeg-src
        run: |
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/out/ffmpeg-install || true

      - name: Stage outputs
        run: |
          mkdir -p out/jniLibs/arm64-v8a
          # Package installed libs similar to Termux structure for yt-dlp wrapper
          if [ -d out/ffmpeg-install/data/youtubedl-android/usr ]; then
            (cd out/ffmpeg-install && zip --symlinks -r $GITHUB_WORKSPACE/out/libffmpeg.zip data/youtubedl-android/usr)
            cp $GITHUB_WORKSPACE/out/libffmpeg.zip out/jniLibs/arm64-v8a/libffmpeg.zip.so
          fi
          # Ship executables as .so (matches existing packaging convention)
          if [ -f ffmpeg-src/ffmpeg ]; then cp ffmpeg-src/ffmpeg out/jniLibs/arm64-v8a/libffmpeg.so; fi
          if [ -f ffmpeg-src/ffprobe ]; then cp ffmpeg-src/ffprobe out/jniLibs/arm64-v8a/libffprobe.so; fi

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: error

  build-aria2:
    name: Build aria2 (arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      TERMUX_ARCH: aarch64
      TERMUX_PREFIX: /data/youtubedl-android/usr
      TERMUX_ANDROID_HOME: /data/youtubedl-android/home
      MAKEFLAGS: "-j$(nproc)"
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip dpkg-dev binutils llvm

      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            termux-packages/.termux-build
            termux-packages/debs
            termux-packages/.cache
          key: aria2-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
          restore-keys: |
            aria2-${{ runner.os }}-

      - name: Clone Termux packages (shallow)
        run: |
          if [ ! -d termux-packages ]; then
            git clone --depth 1 https://github.com/termux/termux-packages.git
          fi

      - name: Build aria2
        working-directory: termux-packages
        run: |
          cat > build-aria2.sh << 'EOS'
          #!/usr/bin/env bash
          set -euxo pipefail
          export TERMUX_ARCH=${TERMUX_ARCH}
          export TERMUX_PREFIX=${TERMUX_PREFIX}
          export TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME}
          export MAKEFLAGS=${MAKEFLAGS}
          export LDFLAGS="${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          ./scripts/run-docker.sh env TERMUX_ARCH=${TERMUX_ARCH} LDFLAGS="${LDFLAGS}" ./build-package.sh aria2
          EOS
          chmod +x build-aria2.sh
          ./build-aria2.sh

      - name: Stage aria2 outputs
        run: |
          find termux-packages/debs -type f -name "*.deb" -print -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/aria2 \; || true
          cd $GITHUB_WORKSPACE/out/aria2 || exit 0
          mkdir -p $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a
          aria2c_path=$(find data -type f -name aria2c 2>/dev/null | head -n1 || true)
          [ -n "$aria2c_path" ] && cp "$aria2c_path" $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libaria2c.so || true
          if [ -d data/youtubedl-android/usr/lib ]; then
            (cd data/youtubedl-android && zip --symlinks -r $GITHUB_WORKSPACE/out/libaria2c.zip usr/lib)
            cp $GITHUB_WORKSPACE/out/libaria2c.zip $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libaria2c.zip.so
          fi

      - name: Upload aria2 artifact
        uses: actions/upload-artifact@v4
        with:
          name: aria2-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: ignore

  build-python:
    name: Build Python (arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      TERMUX_ARCH: aarch64
      TERMUX_PREFIX: /data/youtubedl-android/usr
      TERMUX_ANDROID_HOME: /data/youtubedl-android/home
      MAKEFLAGS: "-j$(nproc)"
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip dpkg-dev binutils llvm

      - name: Restore caches
        uses: actions/cache@v4
        with:
          path: |
            termux-packages/.termux-build
            termux-packages/debs
            termux-packages/.cache
          key: python-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Clone Termux packages (shallow)
        run: |
          if [ ! -d termux-packages ]; then
            git clone --depth 1 https://github.com/termux/termux-packages.git
          fi

      - name: Build Python
        working-directory: termux-packages
        run: |
          cat > build-python.sh << 'EOS'
          #!/usr/bin/env bash
          set -euxo pipefail
          export TERMUX_ARCH=${TERMUX_ARCH}
          export TERMUX_PREFIX=${TERMUX_PREFIX}
          export TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME}
          export MAKEFLAGS=${MAKEFLAGS}
          export LDFLAGS="${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          ./scripts/run-docker.sh env TERMUX_ARCH=${TERMUX_ARCH} LDFLAGS="${LDFLAGS}" ./build-package.sh python
          EOS
          chmod +x build-python.sh
          ./build-python.sh

      - name: Stage Python outputs
        run: |
          find termux-packages/debs -type f -name "*.deb" -print -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/python \; || true
          cd $GITHUB_WORKSPACE/out/python || exit 0
          mkdir -p $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a
          lp=$(find data/youtubedl-android/usr/lib -maxdepth 1 -type f -name "libpython*.so" | head -n1 || true)
          [ -n "$lp" ] && cp "$lp" $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libpython.so || true
          if [ -d data/youtubedl-android/usr/lib ]; then
            (cd data/youtubedl-android && zip --symlinks -r $GITHUB_WORKSPACE/out/libpython.zip usr/lib)
            cp $GITHUB_WORKSPACE/out/libpython.zip $GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libpython.zip.so
          fi

      - name: Upload Python artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: ignore

  verify-and-bundle:
    name: Verify alignment and bundle
    runs-on: ubuntu-latest
    needs: [build-ffmpeg, build-aria2, build-python]
    if: ${{ always() }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Merge outputs
        run: |
          mkdir -p out/jniLibs/arm64-v8a
          find _artifacts -type f -name "*.so" -exec cp {} out/jniLibs/arm64-v8a/ \; || true

      - name: Verify 16KB alignment (PT_LOAD only)
        run: |
          set -euxo pipefail
          shopt -s nullglob
          files=(out/jniLibs/arm64-v8a/*.so)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No .so files found to verify" && exit 1
          fi
          fail=0
          for f in "${files[@]}"; do
            echo "Checking $f"
            if ! llvm-readobj --program-headers "$f" | awk '/Type: PT_LOAD/{flag=1} flag && /Alignment:/{print $2; flag=0}' | grep -q 16384; then
              echo "Alignment check failed for $f"; fail=1
              llvm-readobj --program-headers "$f" | grep -E '(Type: PT_LOAD|Alignment:)' || true
            fi
          done
          exit $fail

      - name: Upload bundled artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aligned-jniLibs-arm64-v8a
          path: out/jniLibs/arm64-v8a
