name: build-16kb-arm64-complete

on:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12.0"
  NDK_VERSION: "r28b"
  API_LEVEL: "24"
  TARGET_TRIPLE: "aarch64-linux-android"
  ANDROID_ABI: "arm64-v8a"
  MAKE_JOBS: "2"

jobs:
  prepare-ndk:
    runs-on: ubuntu-latest
    outputs:
      ndk_path: ${{ steps.set-ndk.outputs.ndk_path }}
    steps:
      - name: Ensure tools available
        run: sudo apt-get update && sudo apt-get install -y wget unzip

      - name: Cache / restore NDK at $HOME/android-ndk-${{ env.NDK_VERSION }}
        id: ndk-cache
        uses: actions/cache@v4
        with:
          path: $HOME/android-ndk-${{ env.NDK_VERSION }}
          key: ndk-${{ env.NDK_VERSION }}-v1
          restore-keys: |
            ndk-${{ env.NDK_VERSION }}-

      - name: Download NDK if cache miss
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss - downloading NDK into $HOME"
          NDK_ZIP="/tmp/android-ndk-${{ env.NDK_VERSION }}-linux.zip"
          wget -q "https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip" -O "$NDK_ZIP"
          unzip -q "$NDK_ZIP" -d $HOME

      - name: Show NDK location and set job output
        id: set-ndk
        run: |
          NDKDIR="$HOME/android-ndk-${{ env.NDK_VERSION }}"
          if [ -d "$NDKDIR" ]; then
            echo "ndk_path=$NDKDIR" >> $GITHUB_OUTPUT
            echo "NDK present at: $NDKDIR"
            ls -la "$NDKDIR" | sed -n '1,120p'
          else
            echo "ERROR: NDK not found at expected path: $NDKDIR"
            ls -la $HOME || true
            exit 2
          fi

      - name: Upload NDK artifact (reliable fallback for downstream jobs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-ndk-${{ env.NDK_VERSION }}
          path: ${{ github.workspace }}/../android-ndk-${{ env.NDK_VERSION }}
          # note: the path points to $HOME/android-ndk-${{ NDK_VERSION }}; ensure runner user HOME = github.workspace/../

  build-host-python:
    runs-on: ubuntu-latest
    needs: prepare-ndk
    steps:
      - uses: actions/checkout@v4
      - name: Install host build deps
        run: sudo apt-get update && sudo apt-get install -y build-essential wget curl
      - name: Restore host-python cache
        id: cache-hostpython
        uses: actions/cache@v4
        with:
          path: /tmp/hostpython
          key: host-python-${{ env.PYTHON_VERSION }}-v1
          restore-keys: |
            host-python-${{ env.PYTHON_VERSION }}-
      - name: Try to download hostpython release asset (fallback)
        id: try_release
        run: |
          REPO="${{ github.repository }}"
          TAG="hostpython-v1"
          FILE="hostpython-${{ env.PYTHON_VERSION }}.tar.gz"
          URL="https://github.com/${REPO}/releases/download/${TAG}/${FILE}"
          echo "Trying release URL: $URL"
          if curl -fSL "$URL" -o /tmp/${FILE}; then
            tar -xzf /tmp/${FILE} -C /tmp || true
            echo "release_hit=true" >> $GITHUB_OUTPUT
          else
            echo "release_hit=false" >> $GITHUB_OUTPUT
          fi
      - name: Download CPython sources (if needed)
        run: |
          PY=${{ env.PYTHON_VERSION }}
          if [ ! -d "/tmp/Python-${PY}" ]; then
            wget -q "https://www.python.org/ftp/python/${PY}/Python-${PY}.tgz" -O /tmp/Python-${PY}.tgz
            tar xf /tmp/Python-${PY}.tgz -C /tmp
          fi
      - name: Build host Python (native) (skip if cached or release)
        if: steps.cache-hostpython.outputs.cache-hit != 'true' && steps.try_release.outputs.release_hit != 'true'
        run: |
          set -e
          PY=${{ env.PYTHON_VERSION }}
          pushd /tmp/Python-${PY}
          ./configure --prefix=/tmp/hostpython --enable-optimizations --without-ensurepip
          make -j${{ env.MAKE_JOBS }}
          make install
          popd
          /tmp/hostpython/bin/python3 -V
      - name: Verify host-python exists
        run: |
          if [ -x /tmp/hostpython/bin/python3 ]; then
            echo "host python ready:"
            /tmp/hostpython/bin/python3 -V
          else
            echo "host python missing; failing"
            ls -la /tmp || true
            exit 2
          fi
      - name: Upload host-python artifact (for same-run fallback)
        uses: actions/upload-artifact@v4
        with:
          name: host-python
          path: /tmp/hostpython

  build-libpython:
    runs-on: ubuntu-latest
    needs: [prepare-ndk, build-host-python]
    steps:
      - uses: actions/checkout@v4

      - name: Restore NDK cache into $HOME (fast, may miss)
        id: ndk-restore
        uses: actions/cache@v4
        with:
          path: $HOME/android-ndk-${{ env.NDK_VERSION }}
          key: ndk-${{ env.NDK_VERSION }}-v1
          restore-keys: |
            ndk-${{ env.NDK_VERSION }}-

      - name: If NDK not present, download artifact from prepare-ndk
        if: ${{ ! ( (exists(env.HOME) && startsWith(env.HOME, '') ) ) }} # noop helper, replaced by shell logic below
        run: echo "noop"

      - name: Ensure NDK present (artifact fallback then network fallback)
        run: |
          # prefer job output from prepare-ndk, then check $HOME; if missing try to download artifact; as last resort download network
          NDK_FROM_JOB="${{ needs.prepare-ndk.outputs.ndk_path }}"
          echo "prepare-ndk advertised: '$NDK_FROM_JOB'"

          # prefer a restored $HOME path
          HOME_NDK="$HOME/android-ndk-${{ env.NDK_VERSION }}"
          if [ -d "$HOME_NDK" ]; then
            NDK="$HOME_NDK"
            echo "NDK restored in \$HOME: $NDK"
          elif [ -n "$NDK_FROM_JOB" ] && [ -d "$NDK_FROM_JOB" ]; then
            NDK="$NDK_FROM_JOB"
            echo "NDK exists at advertised job output path: $NDK"
          else
            # try to download the artifact produced by prepare-ndk
            echo "NDK not found locally; trying to download artifact android-ndk-${{ env.NDK_VERSION }} from prepare-ndk..."
            if gh --version >/dev/null 2>&1; then
              echo "gh CLI present"
            fi
            if actions_download_artifact() { return 1; }; then
              true
            fi
            # use actions/download-artifact action (shell fallback: simulate by curl is complex).
            echo "Attempting download-artifact via actions/download-artifact (this step uses the action below if needed)"
          fi

      - name: Download host-python artifact (fallback if cache miss)
        if: steps.cache-hostpython-restore.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: host-python
          path: /tmp/hostpython

      - name: Download NDK artifact if $HOME missing (action)
        if: steps.ndk-restore.outputs.cache-hit != 'true' && ${{ always() }}
        uses: actions/download-artifact@v4
        with:
          name: android-ndk-${{ env.NDK_VERSION }}
          path: $HOME

      - name: Final NDK check and set PATH
        run: |
          NDK="${{ needs.prepare-ndk.outputs.ndk_path }}"
          if [ -z "$NDK" ] || [ ! -d "$NDK" ]; then
            if [ -d "$HOME/android-ndk-${{ env.NDK_VERSION }}" ]; then
              NDK="$HOME/android-ndk-${{ env.NDK_VERSION }}"
            fi
          fi
          if [ -z "$NDK" ] || [ ! -d "$NDK" ]; then
            echo "NDK not present after cache & artifact restore; attempt direct download (last resort)."
            wget -q "https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip" -O /tmp/ndk.zip
            unzip -q /tmp/ndk.zip -d $HOME
            NDK="$HOME/android-ndk-${{ env.NDK_VERSION }}"
          fi
          if [ -z "$NDK" ] || [ ! -d "$NDK" ]; then
            echo "ERROR: NDK not found after all attempts."
            ls -la $HOME || true
            exit 5
          fi
          echo "Using NDK: $NDK"
          echo "ANDROID_NDK_HOME=$NDK" >> $GITHUB_ENV
          export PATH="$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"

      - name: Restore host-python cache (fast)
        id: cache-hostpython-restore
        uses: actions/cache@v4
        with:
          path: /tmp/hostpython
          key: host-python-${{ env.PYTHON_VERSION }}-v1
          restore-keys: |
            host-python-${{ env.PYTHON_VERSION }}-

      - name: Inspect host-python & ensure exec
        run: |
          if [ -f /tmp/hostpython/bin/python3 ]; then
            chmod +x /tmp/hostpython/bin/python3 || true
            /tmp/hostpython/bin/python3 -V || ( echo "host python failed to run; ldd:" && ldd /tmp/hostpython/bin/python3 || true ; exit 3)
          else
            echo "ERROR: /tmp/hostpython/bin/python3 not found after cache/artifact restore"
            exit 2
          fi

      # ... remainder unchanged: download CPython sources, configure & build libpython ...
      - name: Download CPython sources (copy)
        run: |
          PY=${{ env.PYTHON_VERSION }}
          if [ ! -d "/tmp/Python-${PY}" ]; then
            wget -q "https://www.python.org/ftp/python/${PY}/Python-${PY}.tgz" -O /tmp/Python-${PY}.tgz
            tar xf /tmp/Python-${PY}.tgz -C /tmp
          fi
          cp -r /tmp/Python-${PY} .
      - name: Cross-compile CPython (libpython.so) with --disable-ipv6 (LD_LIBRARY_PATH set)
        shell: bash
        run: |
          set -euo pipefail
          PY=${{ env.PYTHON_VERSION }}
          # pick NDK that we validated earlier
          if [ -z "${NDK:-}" ] || [ ! -d "${NDK:-}" ]; then
            NDK="${{ needs.prepare-ndk.outputs.ndk_path }}"
            if [ -z "$NDK" ] || [ ! -d "$NDK" ]; then
              NDK=$HOME/android-ndk-${{ env.NDK_VERSION }}
            fi
          fi
          API=${{ env.API_LEVEL }}
          TARGET=${{ env.TARGET_TRIPLE }}
          SYSROOT="$NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          cd Python-${PY}

          export CC=${TARGET}${API}-clang
          export CXX=${TARGET}${API}-clang++
          export AR=${TARGET}-ar
          export RANLIB=${TARGET}-ranlib
          export STRIP=${TARGET}-strip

          export CFLAGS="--sysroot=${SYSROOT} -D__ANDROID_API__=${API}"
          export LDFLAGS="--sysroot=${SYSROOT} -Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"

          export BUILD_PYTHON="/tmp/hostpython/bin/python3"
          export LD_LIBRARY_PATH="/tmp/hostpython/lib:${LD_LIBRARY_PATH:-}"

          echo "Using build python: $BUILD_PYTHON"
          $BUILD_PYTHON -V || ( echo "ERROR: build python does not run; aborting." && ldd $BUILD_PYTHON || true ; exit 5 )

          ./configure \
            --host=${TARGET} \
            --build=$(./config.guess) \
            --prefix=$PWD/build-arm64 \
            --enable-shared \
            --with-build-python=${BUILD_PYTHON} \
            --disable-ipv6 \
            ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no \
            CC="$CC" CXX="$CXX" AR="$AR" RANLIB="$RANLIB" STRIP="$STRIP" \
            CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"

          make -j${{ env.MAKE_JOBS }}
          make install

          LIBPATH=$(find . -name "libpython*.so" | head -n1 || true)
          if [ -z "$LIBPATH" ]; then
            echo "libpython not found; failing for diagnosis"
            ls -la
            find . -maxdepth 3 -type f -name "*.so" -print || true
            exit 2
          fi
          cp "$LIBPATH" ../libpython-arm64.so

      - name: Upload libpython artifact
        uses: actions/upload-artifact@v4
        with:
          name: libpython-arm64
          path: libpython-arm64.so

  # build-aria2 and verify-and-package remain similar to previously-proposed content,
  # with the same NDK artifact-download fallback approach used in build-aria2 as well.
