name: build-libpython-arm64-16kb

on:
  workflow_dispatch:

jobs:
  build-libpython-arm64:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.12.0"   # change if you need another Python
      NDK_VERSION: "r28b"        # use r28 or newer
      API_LEVEL: "24"            # android API level for toolchain
      TARGET: "aarch64-linux-android"
      ARCH: "aarch64"

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install deps
      run: sudo apt-get update && sudo apt-get install -y build-essential wget curl unzip pkg-config zlib1g-dev

    - name: Download Android NDK
      run: |
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip -O /tmp/ndk.zip
        unzip -q /tmp/ndk.zip -d $HOME
        echo "ANDROID_NDK_HOME=$HOME/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "NDK=$HOME/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV

    - name: Download CPython source
      run: |
        PY=${{ env.PYTHON_VERSION }}
        wget -q https://www.python.org/ftp/python/${PY}/Python-${PY}.tgz -O /tmp/Python-${PY}.tgz
        tar xf /tmp/Python-${PY}.tgz -C $PWD
        ls -l Python-${PY}

    - name: Prepare toolchain env
      shell: bash
      run: |
        export NDK=$HOME/android-ndk-${{ env.NDK_VERSION }}
        export PATH="$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
        export API=${{ env.API_LEVEL }}
        export CC=${{ env.TARGET }}${API}-clang
        export CXX=${{ env.TARGET }}${API}-clang++
        export AR=${{ env.TARGET }}-ar
        export RANLIB=${{ env.TARGET }}-ranlib
        export STRIP=${{ env.TARGET }}-strip
        echo "CC=$CC" >> $GITHUB_ENV
        echo "CXX=$CXX" >> $GITHUB_ENV
        echo "AR=$AR" >> $GITHUB_ENV
        echo "RANLIB=$RANLIB" >> $GITHUB_ENV
        echo "STRIP=$STRIP" >> $GITHUB_ENV

    - name: Configure and build CPython (arm64 shared lib)
      shell: bash
      run: |
        set -euo pipefail
        PY=${{ env.PYTHON_VERSION }}
        cd Python-${PY}

        # important flags: produce a shared libpython and set 16KB page size for the linker
        export SYSROOT="$NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        export CFLAGS="--sysroot=$SYSROOT -D__ANDROID_API__=${{ env.API_LEVEL }}"
        export LDFLAGS="--sysroot=$SYSROOT -Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"

        # configure for cross-compile
        ./configure \
          --host=${{ env.TARGET }} \
          --build=$(./config.guess) \
          --prefix=$PWD/build \
          --enable-shared \
          ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no \
          CC="$CC" CXX="$CXX" AR="$AR" RANLIB="$RANLIB" STRIP="$STRIP" \
          CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"

        make -j$(nproc) \
          V=1

        make install

        # libpython should be under build/lib or build/lib/libpython*.so
        find $PWD -name "libpython*.so" -print || true
        cp $(find $PWD -name "libpython*.so" | head -n1) ../libpython-arm64.so || true

    - name: Verify ELF alignment (readelf)
      shell: bash
      run: |
        set -e
        echo "=== llvm-readelf PT_LOAD entries ==="
        which llvm-readelf || true
        # use readelf (from binutils) or llvm-readelf from NDK if present
        if command -v llvm-readelf >/dev/null 2>&1; then
          llvm-readelf -l ../libpython-arm64.so || true
        else
          readelf -l ../libpython-arm64.so || true
        fi
        file ../libpython-arm64.so
        ls -l ../libpython-arm64.so

    - name: Download Google alignment checker script
      shell: bash
      run: |
        curl -s -o check_elf_alignment.sh "https://android.googlesource.com/platform/system/extras/+/refs/heads/main/tools/check_elf_alignment.sh?format=TEXT"
        base64 --decode check_elf_alignment.sh > check_elf_alignment.dec.sh
        chmod +x check_elf_alignment.dec.sh
        ./check_elf_alignment.dec.sh ../libpython-arm64.so || true

    - name: Upload libpython artifact
      uses: actions/upload-artifact@v4
      with:
        name: libpython-arm64
        path: ../libpython-arm64.so
