name: Build aligned native libs (16KB)

on:
  workflow_dispatch:
    inputs:
      build_aria2:
        description: "Build aria2 debs"
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      build_python:
        description: "Build Python debs"
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      stage_only:
        description: "Skip builds; only stage ZIPs from artifacts"
        required: false
        default: 'false'
        type: choice
        options: ['true','false']
      reuse_run_id:
        description: "Optional run id to reuse deb artifacts from"
        required: false
        type: string
      cache_key:
        description: "Cache key suffix to reuse builds across runs (bump to bust)"
        required: false
        default: 'v1'
        type: string
      force_rebuild:
        description: "Force rebuild even if caches/artifacts are present"
        required: false
        default: 'false'
        type: choice
        options: ['true','false']

# Allow multiple runs; we prefer reliability over cancellation
concurrency:
  group: 16kb-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-ffmpeg:
    name: Build FFmpeg (arm64, direct NDK)
    runs-on: ubuntu-latest
    timeout-minutes: 240
    if: false
    env:
      API: 21
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
      CCACHE_DIR: ${{ github.workspace }}/.ccache
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y curl tar xz-utils pkg-config build-essential git nasm yasm llvm ccache

      - name: Set up Java (for sdkmanager)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android NDK r27
        run: |
          yes | sdkmanager --licenses >/dev/null || true
          sdkmanager --install "ndk;27.0.12077973" "platform-tools" "platforms;android-34" || true
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/27.0.12077973" >> $GITHUB_ENV

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ffmpeg-ccache-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
          restore-keys: |
            ffmpeg-ccache-${{ runner.os }}-

      - name: Download FFmpeg source (shallow)
        run: |
          curl -L -o ffmpeg.tar.xz https://ffmpeg.org/releases/ffmpeg-6.1.1.tar.xz
          mkdir ffmpeg-src && tar -xf ffmpeg.tar.xz -C ffmpeg-src --strip-components=1

      - name: Configure (aarch64, minimal, shared)
        working-directory: ffmpeg-src
        env:
          ANDROID_NDK: ${{ env.ANDROID_NDK }}
        run: |
          export NDK=${ANDROID_NDK:-$ANDROID_NDK_ROOT}
          export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/linux-x86_64
          export TARGET=aarch64-linux-android
          export API=${API}
          export CC="$TOOLCHAIN/bin/${TARGET}${API}-clang"
          export CXX="$TOOLCHAIN/bin/${TARGET}${API}-clang++"
          export AR=$TOOLCHAIN/bin/llvm-ar
          export LD=$TOOLCHAIN/bin/ld.lld
          export STRIP=$TOOLCHAIN/bin/llvm-strip
          export NM=$TOOLCHAIN/bin/llvm-nm
          export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
          export PKG_CONFIG=false
          export CFLAGS="-fPIC -O2"
          export LDFLAGS="${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          ./configure \
            --target-os=android \
            --arch=aarch64 \
            --enable-cross-compile \
            --cc="$CC" \
            --cxx="$CXX" \
            --ar="$AR" \
            --nm="$NM" \
            --ranlib="$RANLIB" \
            --strip="$STRIP" \
            --pkg-config=false \
            --prefix=/data/youtubedl-android/usr \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-debug \
            --enable-small \
            --disable-autodetect \
            --enable-ffmpeg \
            --enable-ffprobe \
            --disable-ffplay \
            --disable-postproc \
            --disable-avdevice \
            --disable-filters \
            --disable-network \
            --disable-muxers \
            --disable-encoders \
            --disable-decoders \
            --disable-demuxers \
            --disable-parsers \
            --enable-muxer=mp4,matroska,webm,segment,concat,adts \
            --enable-demuxer=mov,matroska,webm,mp3,mp4,ogg,flv,mpegts \
            --enable-parser=aac,h264,hevc,opus,vorbis,mp3 \
            --enable-decoder=aac,h264,hevc,opus,vorbis,mp3 \
            --enable-protocol=file,pipe,concat

      - name: Build
        working-directory: ffmpeg-src
        run: |
          make -j$(nproc)
          make install DESTDIR=$GITHUB_WORKSPACE/out/ffmpeg-install || true

      - name: Stage outputs
        run: |
          mkdir -p out/jniLibs/arm64-v8a
          # Package installed libs similar to Termux structure for yt-dlp wrapper
          if [ -d out/ffmpeg-install/data/youtubedl-android/usr ]; then
            (cd out/ffmpeg-install && zip --symlinks -r $GITHUB_WORKSPACE/out/libffmpeg.zip data/youtubedl-android/usr)
            cp $GITHUB_WORKSPACE/out/libffmpeg.zip out/jniLibs/arm64-v8a/libffmpeg.zip.so
          fi
          # Ship executables as .so (matches existing packaging convention)
          if [ -f ffmpeg-src/ffmpeg ]; then cp ffmpeg-src/ffmpeg out/jniLibs/arm64-v8a/libffmpeg.so; fi
          if [ -f ffmpeg-src/ffprobe ]; then cp ffmpeg-src/ffprobe out/jniLibs/arm64-v8a/libffprobe.so; fi

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: error

  build-aria2:
    name: Build aria2 (arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    if: ${{ inputs.stage_only != 'true' && inputs.build_aria2 == 'true' }}
    env:
      TERMUX_ARCH: aarch64
      TERMUX_PREFIX: /data/youtubedl-android/usr
      TERMUX_ANDROID_HOME: /data/youtubedl-android/home
      MAKEFLAGS: "-j$(nproc)"
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: Restore aria2 debs cache
        id: aria2_deb_cache
        if: ${{ inputs.force_rebuild != 'true' }}
        uses: actions/cache@v4
        with:
          path: out/debs-aria2
          key: aria2-debs-${{ runner.os }}-${{ inputs.cache_key }}
          restore-keys: |
            aria2-debs-${{ runner.os }}-

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip dpkg-dev binutils llvm
          docker --version || true

      - name: Restore termux build caches
        if: ${{ inputs.force_rebuild != 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            termux-packages/.termux-build
            termux-packages/debs
            termux-packages/.cache
          key: aria2-termux-${{ runner.os }}-${{ inputs.cache_key }}
          restore-keys: |
            aria2-termux-${{ runner.os }}-

      - name: Clone Termux packages (shallow)
        if: ${{ inputs.force_rebuild == 'true' || steps.aria2_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          if [ ! -d termux-packages ]; then
            git clone --depth 1 https://github.com/termux/termux-packages.git
          fi

      - name: Force 16KB alignment in aria2 package
        if: ${{ inputs.force_rebuild == 'true' || steps.aria2_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          set -euxo pipefail
          pkg=termux-packages/packages/aria2/build.sh
          if [ -f "$pkg" ]; then
            # Enforce lld and 16KB page alignment for ALL link steps
            echo 'TERMUX_PKG_EXTRA_LDFLAGS+=" -fuse-ld=lld -Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384 "' | tee -a "$pkg"
            echo 'TERMUX_PKG_EXTRA_CONFIGURE_ARGS+=" LDFLAGS=\"${TERMUX_PKG_EXTRA_LDFLAGS}\" "' | tee -a "$pkg"
            echo 'TERMUX_PKG_EXTRA_CONFIGURE_ARGS+=" -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384\" -DCMAKE_SHARED_LINKER_FLAGS=\"-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384\" "' | tee -a "$pkg"
          fi

      - name: Build aria2
        working-directory: termux-packages
        if: ${{ inputs.force_rebuild == 'true' || steps.aria2_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          cat > build-aria2.sh << 'EOS'
          #!/usr/bin/env bash
          set -euxo pipefail
          export TERMUX_ARCH=${TERMUX_ARCH}
          export TERMUX_PREFIX=${TERMUX_PREFIX}
          export TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME}
          export MAKEFLAGS=${MAKEFLAGS}
          export EXTRA_LDFLAGS="-fuse-ld=lld -Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
          export LDFLAGS="${EXTRA_LDFLAGS} ${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          export CFLAGS="${CFLAGS:-} -fPIC"
          export CXXFLAGS="${CXXFLAGS:-} -fPIC"
          # Force rebuild to avoid reusing prebuilt debs from cache
          ./scripts/run-docker.sh env TERMUX_ARCH=${TERMUX_ARCH} TERMUX_PREFIX=${TERMUX_PREFIX} TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME} LDFLAGS="${LDFLAGS}" CFLAGS="${CFLAGS}" CXXFLAGS="${CXXFLAGS}" ./build-package.sh -f aria2
          EOS
          chmod +x build-aria2.sh
          ./build-aria2.sh

      - name: List built aria2 debs
        if: ${{ inputs.force_rebuild == 'true' || steps.aria2_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          echo "Listing debs after aria2 build:"
          find termux-packages -type f -name "*.deb" -print || true

      - name: Collect aria2 debs
        if: ${{ inputs.force_rebuild == 'true' || steps.aria2_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          set -euxo pipefail
          mkdir -p out/debs-aria2
          # Copy any .deb produced anywhere inside termux-packages
          found=$(find termux-packages -type f -name "*.deb" -print -exec cp {} out/debs-aria2/ \; | tee /dev/stderr | wc -l)
          if [ "$found" -eq 0 ]; then
            echo "No aria2 debs produced" >&2
            exit 1
          fi

      - name: Sanitize aria2 deb filenames (replace ':' with '_')
        run: |
          set -euxo pipefail
          mkdir -p out/debs-aria2
          shopt -s nullglob
          for f in out/debs-aria2/*.deb; do
            base=$(basename "$f")
            safe=${base//:/_}
            if [ "$base" != "$safe" ]; then
              mv -f "out/debs-aria2/$base" "out/debs-aria2/$safe"
            fi
          done

      - name: Upload aria2 deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aria2-debs
          path: out/debs-aria2
          if-no-files-found: error

  build-python:
    name: Build Python (arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 360
    if: ${{ inputs.stage_only != 'true' && inputs.build_python == 'true' }}
    env:
      TERMUX_ARCH: aarch64
      TERMUX_PREFIX: /data/youtubedl-android/usr
      TERMUX_ANDROID_HOME: /data/youtubedl-android/home
      MAKEFLAGS: "-j$(nproc)"
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: Restore python debs cache
        id: python_deb_cache
        if: ${{ inputs.force_rebuild != 'true' }}
        uses: actions/cache@v4
        with:
          path: out/debs-python
          key: python-debs-${{ runner.os }}-${{ inputs.cache_key }}
          restore-keys: |
            python-debs-${{ runner.os }}-

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip dpkg-dev binutils llvm
          docker --version || true

      - name: Restore termux build caches
        if: ${{ inputs.force_rebuild != 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            termux-packages/.termux-build
            termux-packages/debs
            termux-packages/.cache
          key: python-termux-${{ runner.os }}-${{ inputs.cache_key }}
          restore-keys: |
            python-termux-${{ runner.os }}-

      - name: Clone Termux packages (shallow)
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          if [ ! -d termux-packages ]; then
            git clone --depth 1 https://github.com/termux/termux-packages.git
          fi

      - name: Force 16KB alignment in Python package
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          set -euxo pipefail
          pkg=termux-packages/packages/python/build.sh
          if [ -f "$pkg" ]; then
            echo 'TERMUX_PKG_EXTRA_LDFLAGS+=" -fuse-ld=lld -Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384 "' | tee -a "$pkg"
            echo 'TERMUX_PKG_EXTRA_CONFIGURE_ARGS+=" LDFLAGS=\"${TERMUX_PKG_EXTRA_LDFLAGS}\" "' | tee -a "$pkg"
            echo 'TERMUX_PKG_EXTRA_CONFIGURE_ARGS+=" -DCMAKE_EXE_LINKER_FLAGS=\"-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384\" -DCMAKE_SHARED_LINKER_FLAGS=\"-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384\" "' | tee -a "$pkg"
          fi

      - name: Build Python
        working-directory: termux-packages
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          cat > build-python.sh << 'EOS'
          #!/usr/bin/env bash
          set -euxo pipefail
          export TERMUX_ARCH=${TERMUX_ARCH}
          export TERMUX_PREFIX=${TERMUX_PREFIX}
          export TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME}
          export MAKEFLAGS=${MAKEFLAGS}
          export EXTRA_LDFLAGS="-fuse-ld=lld -Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
          export LDFLAGS="${EXTRA_LDFLAGS} ${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          export CFLAGS="${CFLAGS:-} -fPIC"
          export CXXFLAGS="${CXXFLAGS:-} -fPIC"
          ./scripts/run-docker.sh env TERMUX_ARCH=${TERMUX_ARCH} TERMUX_PREFIX=${TERMUX_PREFIX} TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME} LDFLAGS="${LDFLAGS}" CFLAGS="${CFLAGS}" CXXFLAGS="${CXXFLAGS}" ./build-package.sh -f python
          EOS
          chmod +x build-python.sh
          ./build-python.sh

      - name: List built Python debs
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          echo "Listing debs after Python build:"
          find termux-packages -type f -name "*.deb" -print || true

      - name: Collect Python debs
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          set -euxo pipefail
          mkdir -p out/debs-python
          found=$(find termux-packages -type f -name "*.deb" -print -exec cp {} out/debs-python/ \; | tee /dev/stderr | wc -l)
          if [ "$found" -eq 0 ]; then
            echo "No python debs produced" >&2
            exit 1
          fi

      - name: Sanitize Python deb filenames (replace ':' with '_')
        run: |
          set -euxo pipefail
          mkdir -p out/debs-python
          shopt -s nullglob
          for f in out/debs-python/*.deb; do
            base=$(basename "$f")
            safe=${base//:/_}
            if [ "$base" != "$safe" ]; then
              mv -f "out/debs-python/$base" "out/debs-python/$safe"
            fi
          done

      - name: Upload Python deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-debs
          path: out/debs-python
          if-no-files-found: error

  stage-aria2-zip:
    name: Stage aria2 ZIP
    runs-on: ubuntu-latest
    needs: [build-aria2]
    if: ${{ inputs.stage_only != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Download aria2 deb artifacts
        uses: actions/download-artifact@v4
        with:
          name: aria2-debs
          path: _aria2_debs
      - name: Create aria2 ZIP
        run: |
          set -euxo pipefail
          mkdir -p $GITHUB_WORKSPACE/out/aria2
          find _aria2_debs -type f -name "*.deb" -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/aria2 \;
          cd $GITHUB_WORKSPACE/out/aria2
          for prefix in data/youtubedl-android/usr data/data/com.termux/files/usr data/usr usr; do
            if [ -d "$prefix/lib" ]; then
              (cd "$(dirname "$prefix")" && zip --symlinks -r $GITHUB_WORKSPACE/out/libaria2c.zip "$(basename "$prefix")"/lib)
              break
            fi
          done
          [ -f $GITHUB_WORKSPACE/out/libaria2c.zip ]
      - name: Upload aria2 artifact
        uses: actions/upload-artifact@v4
        with:
          name: aria2-arm64
          path: out/libaria2c.zip
          if-no-files-found: error
          retention-days: 14

  stage-python-zip:
    name: Stage Python ZIP
    runs-on: ubuntu-latest
    needs: [build-python]
    if: ${{ inputs.stage_only != 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Python deb artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-debs
          path: _python_debs
      - name: Create Python ZIP
        run: |
          set -euxo pipefail
          mkdir -p $GITHUB_WORKSPACE/out/python
          find _python_debs -type f -name "*.deb" -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/python \;
          cd $GITHUB_WORKSPACE/out/python
          for prefix in data/youtubedl-android/usr data/data/com.termux/files/usr data/usr usr; do
            if [ -d "$prefix/lib" ]; then
              (cd "$(dirname "$prefix")" && zip --symlinks -r $GITHUB_WORKSPACE/out/libpython.zip "$(basename "$prefix")"/lib)
              break
            fi
          done
          [ -f $GITHUB_WORKSPACE/out/libpython.zip ]
      - name: Upload Python artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-arm64
          path: out/libpython.zip
          if-no-files-found: error
          retention-days: 14

  assemble-jniLibs:
    name: Assemble jniLibs (end-to-end)
    runs-on: ubuntu-latest
    needs: [stage-aria2-zip, stage-python-zip]
    if: ${{ inputs.stage_only != 'true' }}
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev llvm zip unzip file
      - name: Download aria2 deb artifacts
        uses: actions/download-artifact@v5
        with:
          name: aria2-debs
          path: _aria2_debs
      - name: Download python deb artifacts
        uses: actions/download-artifact@v5
        with:
          name: python-debs
          path: _python_debs
      - name: Download staged zips
        uses: actions/download-artifact@v5
        with:
          pattern: "*arm64"
          path: _staged
          merge-multiple: true
      - name: Extract debs and assemble jniLibs
        run: |
          set -euxo pipefail
          mkdir -p out/jniLibs/arm64-v8a out/tmp/aria2 out/tmp/python
          for f in _aria2_debs/*.deb; do dpkg-deb -x "$f" out/tmp/aria2 || true; done
          for f in _python_debs/*.deb; do dpkg-deb -x "$f" out/tmp/python || true; done
          # Copy staged zips if present
          [ -f _staged/libaria2c.zip ] && cp _staged/libaria2c.zip out/jniLibs/arm64-v8a/libaria2c.zip.so || true
          [ -f _staged/libpython.zip ] && cp _staged/libpython.zip out/jniLibs/arm64-v8a/libpython.zip.so || true
          # If zip not present, create from debs
          if [ ! -f out/jniLibs/arm64-v8a/libaria2c.zip.so ]; then
            for p in out/tmp/aria2/data/youtubedl-android/usr out/tmp/aria2/data/data/com.termux/files/usr out/tmp/aria2/data/usr out/tmp/aria2/usr; do
              if [ -d "$p/lib" ]; then (cd "$(dirname "$p")" && zip --symlinks -r "$GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libaria2c.zip.so" "$(basename "$p")"/lib); break; fi
            done
          fi
          if [ ! -f out/jniLibs/arm64-v8a/libpython.zip.so ]; then
            for p in out/tmp/python/data/youtubedl-android/usr out/tmp/python/data/data/com.termux/files/usr out/tmp/python/data/usr out/tmp/python/usr; do
              if [ -d "$p/lib" ]; then (cd "$(dirname "$p")" && zip --symlinks -r "$GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libpython.zip.so" "$(basename "$p")"/lib); break; fi
            done
          fi
          # aria2c ELF
          a2=$(find out/tmp/aria2 -type f -path '*/usr/bin/aria2c' -print -quit || true)
          [ -z "$a2" ] && a2=$(find out/tmp/aria2 -type f -name aria2c -print -quit || true)
          if [ -n "$a2" ] && file -b "$a2" | grep -qi ELF; then cp "$a2" out/jniLibs/arm64-v8a/libaria2c.so; fi
          # libpython*.so ELF
          pys=""
          for cand in $(find out/tmp/python -type f -path '*/usr/lib/*' -name 'libpython*.so*' | sort); do
            if file -b "$cand" | grep -qi ELF; then pys="$cand"; break; fi
          done
          if [ -n "$pys" ]; then cp "$pys" out/jniLibs/arm64-v8a/libpython.so; fi
      - name: Verify 16KB PT_LOAD alignment
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in out/jniLibs/arm64-v8a/*.so; do
            [[ "$f" == *.zip.so ]] && continue
            echo Checking $f
            if ! llvm-readobj --program-headers "$f" | grep -A3 "Type: PT_LOAD" | grep -q "Alignment: 16384"; then
              echo "FAIL: $f not 16KB-aligned"
              llvm-readobj --program-headers "$f" || true
              readelf -l "$f" || true
              exit 1
            fi
          done
      - name: Upload jniLibs artifact
        uses: actions/upload-artifact@v4
        with:
          name: jniLibs-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: error
          retention-days: 14

  stage-aria2-zip-reuse:
    name: Stage aria2 ZIP (reuse artifacts)
    runs-on: ubuntu-latest
    if: ${{ inputs.stage_only == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Download aria2 deb artifacts from run
        uses: actions/download-artifact@v4
        with:
          name: aria2-debs
          path: _aria2_debs
          run-id: ${{ inputs.reuse_run_id }}
      - name: Create aria2 ZIP
        run: |
          set -euxo pipefail
          mkdir -p $GITHUB_WORKSPACE/out/aria2
          find _aria2_debs -type f -name "*.deb" -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/aria2 \;
          cd $GITHUB_WORKSPACE/out/aria2
          for prefix in data/youtubedl-android/usr data/data/com.termux/files/usr data/usr usr; do
            if [ -d "$prefix/lib" ]; then
              (cd "$(dirname "$prefix")" && zip --symlinks -r $GITHUB_WORKSPACE/out/libaria2c.zip "$(basename "$prefix")"/lib)
              break
            fi
          done
          [ -f $GITHUB_WORKSPACE/out/libaria2c.zip ]
      - name: Upload aria2 artifact
        uses: actions/upload-artifact@v4
        with:
          name: aria2-arm64
          path: out/libaria2c.zip
          if-no-files-found: error
          retention-days: 14

  stage-python-zip-reuse:
    name: Stage Python ZIP (reuse artifacts)
    runs-on: ubuntu-latest
    if: ${{ inputs.stage_only == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Python deb artifacts from run
        uses: actions/download-artifact@v4
        with:
          name: python-debs
          path: _python_debs
          run-id: ${{ inputs.reuse_run_id }}
      - name: Create Python ZIP
        run: |
          set -euxo pipefail
          mkdir -p $GITHUB_WORKSPACE/out/python
          find _python_debs -type f -name "*.deb" -exec dpkg-deb -x {} $GITHUB_WORKSPACE/out/python \;
          cd $GITHUB_WORKSPACE/out/python
          for prefix in data/youtubedl-android/usr data/data/com.termux/files/usr data/usr usr; do
            if [ -d "$prefix/lib" ]; then
              (cd "$(dirname "$prefix")" && zip --symlinks -r $GITHUB_WORKSPACE/out/libpython.zip "$(basename "$prefix")"/lib)
              break
            fi
          done
          [ -f $GITHUB_WORKSPACE/out/libpython.zip ]
      - name: Upload Python artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-arm64
          path: out/libpython.zip
          if-no-files-found: error
          retention-days: 14

  assemble-jniLibs-reuse:
    name: Assemble jniLibs (reuse artifacts)
    runs-on: ubuntu-latest
    if: ${{ inputs.stage_only == 'true' }}
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev llvm zip unzip file
      - name: Download debs from run
        uses: actions/download-artifact@v5
        with:
          pattern: "*-debs"
          path: _debs
          run-id: ${{ inputs.reuse_run_id }}
          merge-multiple: true
      - name: Download staged zips from run
        uses: actions/download-artifact@v5
        with:
          pattern: "*arm64"
          path: _staged
          run-id: ${{ inputs.reuse_run_id }}
          merge-multiple: true
      - name: Assemble
        run: |
          set -euxo pipefail
          mkdir -p out/jniLibs/arm64-v8a out/tmp/aria2 out/tmp/python
          for f in _debs/*.deb; do
            if echo "$f" | grep -qi aria2; then dpkg-deb -x "$f" out/tmp/aria2; fi
            if echo "$f" | grep -qi python; then dpkg-deb -x "$f" out/tmp/python; fi
          done
          [ -f _staged/libaria2c.zip ] && cp _staged/libaria2c.zip out/jniLibs/arm64-v8a/libaria2c.zip.so || true
          [ -f _staged/libpython.zip ] && cp _staged/libpython.zip out/jniLibs/arm64-v8a/libpython.zip.so || true
          if [ ! -f out/jniLibs/arm64-v8a/libaria2c.zip.so ]; then
            for p in out/tmp/aria2/data/youtubedl-android/usr out/tmp/aria2/data/data/com.termux/files/usr out/tmp/aria2/data/usr out/tmp/aria2/usr; do
              if [ -d "$p/lib" ]; then (cd "$(dirname "$p")" && zip --symlinks -r "$GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libaria2c.zip.so" "$(basename "$p")"/lib); break; fi
            done
          fi
          if [ ! -f out/jniLibs/arm64-v8a/libpython.zip.so ]; then
            for p in out/tmp/python/data/youtubedl-android/usr out/tmp/python/data/data/com.termux/files/usr out/tmp/python/data/usr out/tmp/python/usr; do
              if [ -d "$p/lib" ]; then (cd "$(dirname "$p")" && zip --symlinks -r "$GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libpython.zip.so" "$(basename "$p")"/lib); break; fi
            done
          fi
          a2=$(find out/tmp/aria2 -type f -path '*/usr/bin/aria2c' -print -quit || true)
          [ -z "$a2" ] && a2=$(find out/tmp/aria2 -type f -name aria2c -print -quit || true)
          if [ -n "$a2" ] && file -b "$a2" | grep -qi ELF; then cp "$a2" out/jniLibs/arm64-v8a/libaria2c.so; fi
          pys=""
          for cand in $(find out/tmp/python -type f -path '*/usr/lib/*' -name 'libpython*.so*' | sort); do
            if file -b "$cand" | grep -qi ELF; then pys="$cand"; break; fi
          done
          if [ -n "$pys" ]; then cp "$pys" out/jniLibs/arm64-v8a/libpython.so; fi
      - name: Verify 16KB PT_LOAD alignment
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in out/jniLibs/arm64-v8a/*.so; do
            [[ "$f" == *.zip.so ]] && continue
            echo Checking $f
            if ! llvm-readobj --program-headers "$f" | grep -A3 "Type: PT_LOAD" | grep -q "Alignment: 16384"; then
              echo "FAIL: $f not 16KB-aligned"
              llvm-readobj --program-headers "$f" || true
              readelf -l "$f" || true
              exit 1
            fi
          done
      - name: Upload jniLibs artifact
        uses: actions/upload-artifact@v4
        with:
          name: jniLibs-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: error
          retention-days: 14
