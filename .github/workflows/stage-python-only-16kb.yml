name: Build Python only (16KB)

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: "Force rebuild even if caches present"
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      cache_key:
        description: "Cache key suffix (bump to bust caches)"
        required: false
        default: 'v1'
        type: string

jobs:
  build-python:
    name: Build Python (arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 240
    env:
      TERMUX_ARCH: aarch64
      TERMUX_PREFIX: /data/youtubedl-android/usr
      TERMUX_ANDROID_HOME: /data/youtubedl-android/home
      MAKEFLAGS: "-j$(nproc)"
      EXTRA_LDFLAGS: "-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y zip unzip dpkg-dev binutils llvm
          docker --version || true

      - name: Restore python debs cache
        id: python_deb_cache
        if: ${{ inputs.force_rebuild != 'true' }}
        uses: actions/cache@v4
        with:
          path: out/debs-python
          key: python-debs-${{ runner.os }}-${{ inputs.cache_key }}
          restore-keys: |
            python-debs-${{ runner.os }}-

      - name: Restore termux caches
        if: ${{ inputs.force_rebuild != 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            termux-packages/.termux-build
            termux-packages/debs
            termux-packages/.cache
          key: python-termux-${{ runner.os }}-${{ inputs.cache_key }}
          restore-keys: |
            python-termux-${{ runner.os }}-

      - name: Clone Termux packages (shallow)
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          if [ ! -d termux-packages ]; then git clone --depth 1 https://github.com/termux/termux-packages.git; fi

      - name: Force 16KB LDFLAGS in Python recipe
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          set -euxo pipefail
          pkg=termux-packages/packages/python/build.sh
          if [ -f "$pkg" ]; then
            echo 'TERMUX_PKG_EXTRA_LDFLAGS+=" -Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384 "' | tee -a "$pkg"
            # Ensure Python links shared libs with the extra LDFLAGS by exporting in recipe
            echo 'export LDFLAGS="${LDFLAGS:-} $TERMUX_PKG_EXTRA_LDFLAGS"' | tee -a "$pkg"
            echo 'export LDSHARED="${CC:-cc} -shared $TERMUX_PKG_EXTRA_LDFLAGS"' | tee -a "$pkg"
            echo 'export LDCXXSHARED="${CXX:-c++} -shared $TERMUX_PKG_EXTRA_LDFLAGS"' | tee -a "$pkg"
            echo 'export LINKFORSHARED="$TERMUX_PKG_EXTRA_LDFLAGS"' | tee -a "$pkg"
          fi

      - name: Build Python
        working-directory: termux-packages
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          cat > build-python.sh << 'EOS'
          #!/usr/bin/env bash
          set -euxo pipefail
          export TERMUX_ARCH=${TERMUX_ARCH}
          export TERMUX_PREFIX=${TERMUX_PREFIX}
          export TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME}
          export MAKEFLAGS=${MAKEFLAGS}
          export EXTRA_LDFLAGS="-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
          export LDFLAGS="${EXTRA_LDFLAGS} ${LDFLAGS:-} ${EXTRA_LDFLAGS}"
          export CFLAGS="${CFLAGS:-} -fPIC"
          export CXXFLAGS="${CXXFLAGS:-} -fPIC"
          ./scripts/run-docker.sh env \
            TERMUX_ARCH=${TERMUX_ARCH} \
            TERMUX_PREFIX=${TERMUX_PREFIX} \
            TERMUX_ANDROID_HOME=${TERMUX_ANDROID_HOME} \
            LDFLAGS="${LDFLAGS}" \
            CFLAGS="${CFLAGS}" \
            CXXFLAGS="${CXXFLAGS}" \
            LDSHARED="\$CC -shared ${EXTRA_LDFLAGS}" \
            LDCXXSHARED="\$CXX -shared ${EXTRA_LDFLAGS}" \
            LINKFORSHARED="${EXTRA_LDFLAGS}" \
            ./build-package.sh -f python
          EOS
          chmod +x build-python.sh
          ./build-python.sh

      - name: Collect Python debs
        if: ${{ inputs.force_rebuild == 'true' || steps.python_deb_cache.outputs.cache-hit != 'true' }}
        run: |
          set -euxo pipefail
          mkdir -p out/debs-python
          found=$(find termux-packages -type f -name "*.deb" -print -exec cp {} out/debs-python/ \; | tee /dev/stderr | wc -l)
          if [ "$found" -eq 0 ]; then echo "No python debs produced" >&2; exit 1; fi

      - name: Sanitize Python deb filenames (replace ':' with '_')
        run: |
          set -euxo pipefail
          mkdir -p out/debs-python
          shopt -s nullglob
          for f in out/debs-python/*.deb; do
            base=$(basename "$f")
            safe=${base//:/_}
            if [ "$base" != "$safe" ]; then
              mv -f "out/debs-python/$base" "out/debs-python/$safe"
            fi
          done

      - name: Upload Python deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-debs
          path: out/debs-python
          if-no-files-found: error

  stage-python:
    name: Stage Python ZIP and jniLibs
    runs-on: ubuntu-latest
    needs: [build-python]
    steps:
      - uses: actions/checkout@v4
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev zip unzip llvm binutils file
      - name: Download debs
        uses: actions/download-artifact@v4
        with:
          name: python-debs
          path: _python_debs
      - name: Stage
        run: |
          set -euxo pipefail
          mkdir -p out/jniLibs/arm64-v8a out/tmp/python
          for f in _python_debs/*.deb; do dpkg-deb -x "$f" out/tmp/python || true; done
          if [ -f out/jniLibs/arm64-v8a/libpython.zip.so ]; then rm -f out/jniLibs/arm64-v8a/libpython.zip.so; fi
          for p in out/tmp/python/data/youtubedl-android/usr out/tmp/python/data/data/com.termux/files/usr out/tmp/python/data/usr out/tmp/python/usr; do
            if [ -d "$p/lib" ]; then (cd "$(dirname "$p")" && zip --symlinks -r "$GITHUB_WORKSPACE/out/jniLibs/arm64-v8a/libpython.zip.so" "$(basename "$p")"/lib); break; fi
          done
          pys=""
          for cand in $(find out/tmp/python -type f -path '*/usr/lib/*' -name 'libpython*.so*' | sort); do
            if file -b "$cand" | grep -qi ELF; then pys="$cand"; break; fi
          done
          if [ -n "$pys" ]; then cp "$pys" out/jniLibs/arm64-v8a/libpython.so; fi

      - name: Verify 16KB PT_LOAD alignment
        run: |
          set -euo pipefail
          for f in out/jniLibs/arm64-v8a/*.so; do
            [[ "$f" == *.zip.so ]] && continue
            echo Checking $f
            if ! llvm-readobj --program-headers "$f" | grep -A3 "Type: PT_LOAD" | grep -q "Alignment: 16384"; then
              echo "FAIL: $f not 16KB-aligned"; llvm-readobj --program-headers "$f" || true; readelf -l "$f" || true; exit 1
            fi
          done

      - name: Upload jniLibs artifact
        uses: actions/upload-artifact@v4
        with:
          name: jniLibs-python-arm64
          path: out/jniLibs/arm64-v8a
          if-no-files-found: error

